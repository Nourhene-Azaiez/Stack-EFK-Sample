<system> 
  suppress_config_dump true
</system>
#----------forward source to read container logs----------------------------------------------------
<source>
  @type forward
  port 24224
  bind 0.0.0.0
</source>
#----------------------------------------------------------------------------

#---------docker stats-------------------------------------------------
<source>
  @type exec
  command /usr/local/bin/dockercmd.sh
  tag container.life
  run_interval 60s
  <parse>
    @type json
  </parse>
</source>
#----------------------------------------------------------------------------

#---------tail source--------------------------------------------------------
# <source>
#   @type tail
#   path /var/log/dockerlogs/*/*.log
#   pos_file /var/log/fluentd/dockerlogs.pos
#   tag docker.logs
#   format none
# </source>
# <source>
#   @type exec
#   command docker-compose logs web
#   tag stats
#   run_interval 5s
#   <parse>
#     @type json
#   </parse>
# </source>

# <source>
#   @type tail
#   path /var/log/nginx/error.log
#   tag nginx.error
#   <parse>
#     @type json
#   </parse>
# </source>
#----------------------------------------------------------------------------

#---------filter section-----------------------------------------------------
<filter docker.kibana>
  @type record_transformer
  enable_ruby
  <record>
    container_id ${record["container_id"]}
    container_name ${record["container_name"]}
    source ${record["source"]}
    log ${record["log"]}
    tag ${record["tag"]}
    log_timestamp ${record["log"].scan(/\[(.*?)\]/).first&.first}
    log_level ${record["log"].scan(/\]\[(.*?)\]/).last&.first}
    process_id ${record["log"].scan(/\]\s\[(.*?)\]\s/).first&.first}
    message ${record["log"].sub(/^\[.*?\]\[.*?\]\s\[.*?\]\s/, '')}
  </record>
  remove_keys container_id, log
</filter>

<filter docker.postgres>
  @type record_transformer
  enable_ruby
  <record>
    container_id ${record["container_id"]}
    container_name ${record["container_name"]}
    source ${record["source"]}
    log ${record["log"]}
    tag ${record["tag"]}
    log_timestamp ${record["log"].scan(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:\.\d+)?([+\-]\d{2}:\d{2})?/).flatten.first}
    process_id ${record["log"].scan(/\[(\d+)\]/).first}
    log_level ${record["log"].scan(/\s(\w+):\s/).first}
    message ${record["log"].sub(/^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d+ \w+ \[\d+\] \w+: /, '')}
  </record>
  remove_keys container_id, log
</filter>

<filter docker.web, docker.logger>
  @type record_transformer
  enable_ruby
  <record>
    container_id ${record["container_id"]}
    container_name ${record["container_name"]}
    source ${record["source"]}
    log ${record["log"]}
    tag ${record["tag"]}
    log_timestamp ${record["log"].scan(/^\[(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:\.\d+)?([+\-]\d{2}:\d{2})?)\]/).flatten.first}
    process_id ${record["log"].scan(/\[(\d+)\]/).last}
    log_level ${record["log"].scan(/\[(\w+)\]/).last}
    message ${record["log"].sub(/^\[\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2} \+\d+\] \[\d+\] \[\w+\] /, '')}
  </record>
  remove_keys container_id, log
</filter>
#----------------------------------------------------------------------------

#---------match section------------------------------------------------------
<match container.**>
  @type elasticsearch
  host elasticsearch
  port 9200
  logstash_format false
  index_name container_health_check
  type_name _doc
  include_tag_key true
  id_key ID
  flush_interval 1s
</match>

# <match docker.web>
#   @type stdout
# </match>

<match docker.**>
  @type elasticsearch
  host elasticsearch
  port 9200
  logstash_format false
  index_name container_logs
  type_name _doc
  include_tag_key false
  include_timestamp true
  flush_interval 1s
</match>

<match **>
  @type stdout
</match>
#----------------------------------------------------------------------------